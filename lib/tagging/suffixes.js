const rules = [
	{
		regexp:/^.{1,}rate$/gi,
		pos:"VB"
	},
	{
		regexp:/^.{1,}rates$/gi,
		pos:"VBZ"
	},
	{
		regexp:/^.{1,}late$/gi,
		pos:"VB"
	},
	{
		regexp:/^.{1,}lates$/gi,
		pos:"VBZ"
	},
	{
		regexp:/^.{1,}nate$/gi,
		pos:"VB"
	},
	{
		regexp:/^.{1,}nates$/gi,
		pos:"VBZ"
	},
	{
		regexp:/^.{1,}izes$/gi,
		pos:"VBZ"
	},
	{
		regexp:/^.{1,}ize$/gi,
		pos:"VB"
	},
	{
		regexp:/^.{1,}ify$/gi,
		pos:"VB"
	},
	{
		regexp:/^.{1,}ifies$/gi,
		pos:"VBZ"
	},
	{
		regexp:/^.{1,}ising$/gi,
		pos:"VBG"
	},
	{
		regexp:/^.{1,}ism$/gi,
		pos:"NN"
	},
	{
		regexp:/^.{1,}able$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ible$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ical$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}esque$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ous$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}etic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}atic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}egic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ophic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ish$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ive$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}gic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}tic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}mic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}phile$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}less$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ful$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}edelic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}adelic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}aholic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}oholic$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ilar$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ular$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ly$/gi,
		pos:"RB"
	},
	{
		regexp:/^.{1,}like$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}wise$/gi,
		pos:"RB"
	},
	{
		regexp:/^.{1,}ise$/gi,
		pos:"VB"
	},
	{
		regexp:/^.{1,}some$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}escent$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}chy$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}thy$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}shy$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}sty$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}tty$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}bby$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ssy$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}zzy$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}mmy$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ppy$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}tary$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}nary$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ial$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}alous$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}ally$/gi,
		pos:"RB"
	},
	{
		regexp:/^.{1,}vid$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}rid$/gi,
		pos:"JJ"
	},
	{
		regexp:/^.{1,}wards$/gi,
		pos:"RB"
	},
	{
		regexp:/^.{1,}iest$/gi,
		pos:"JJS"
	},
	{
		regexp:/^.{1,}dest$/gi,
		pos:"JJS"
	},
	{
		regexp:/^.{1,}rth$/gi,
		pos:"JJ"
	}
];

/**
 * 
 * Detect a given token against the regular expressions show above
 * 
 * @param  {String} 			token 		Token to test
 * @return {String|Undefined}				either the relevant POS tag or undefined
 * 
**/
module.exports = function(token){
	return (rules.find((rule)=>rule.regex.test(token))||{}).pos;
};