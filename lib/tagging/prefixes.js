const lexicon = require('en-lexicon').lexicon;

// important: prefixes array should start with the longer down to the shorter 
const prefixes = [
	"counter",
	"electro",
	"across",
	"circum",
	"contra",
	"crypto",
	"franco",
	"hetero",
	"thermo",
	"paleo",
	"intro",
	"supra",
	"super",
	"astro",
	"ortho",
	"socio",
	"macro",
	"infra",
	"retro",
	"intra",
	"quasi",
	"under",
	"multi",
	"ultra",
	"hyper",
	"hydro",
	"micro",
	"photo",
	"extra",
	"anglo",
	"trans",
	"inter",
	"after",
	"anti",
	"tele",
	"ambi",
	"hind",
	"homo",
	"hypo",
	"ideo",
	"idio",
	"afro",
	"arch",
	"maxi",
	"mega",
	"meta",
	"auto",
	"down",
	"mono",
	"back",
	"ante",
	"cryo",
	"omni",
	"hemi",
	"over",
	"euro",
	"para",
	"xeno",
	"fore",
	"peri",
	"pleo",
	"poly",
	"post",
	"demi",
	"vice",
	"pyro",
	"gyro",
	"self",
	"semi",
	"step",
	"cis",
	"mis",
	"sub",
	"bio",
	"pro",
	"pre",
	"per",
	"ped",
	"pan",
	"out",
	"off",
	"non",
	"dia",
	"uni",
	"mid",
	"iso",
	"geo",
	"tri",
	"epi",
	"ana",
	"com",
	"sur",
	"eco",
	"dis",
	"apo",
	"neo",
	"re",
	"co",
	"by",
	"ex",
	"en",
	"em",
	"di",
	"bi",
	"un",
	"de"
];

module.exports = function(token){
	for (var i = prefixes.length - 1; i >= 0; i--) {
		var prefix = prefixes[i];
		var prefixUsed = token.startsWith(prefix);
		var prefixWithHyphen = token.startsWith(prefix+"-");
		if(!(prefixWithHyphen||prefixUsed)) continue;
		
		var fragment;
		if(prefixWithHyphen) fragment = token.split(prefix+"-")[1];
		else fragment = token.split(prefix)[1];
		
		var lexiconEntry = lexicon[fragment];
		if(!lexiconEntry) continue;
		lexicon[token] = lexiconEntry; 		// save entry in the lexicon (for later smoothing verification)
		return lexiconEntry.split("|")[0];	// return the first tag 
	}
	return undefined;
};